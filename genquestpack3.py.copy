# -*- coding: utf-8 -*-

# Import the modules    
import requests
import urllib3
from urllib.parse import urlparse
from bs4 import BeautifulSoup
import re
from pptx import Presentation
#from transliterate import translit, get_available_language_codes
from unidecode import unidecode
import sys
import os


urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def downloadImage(url):
    image_name = 'qimg.jpg'
    #url = 'http://example.com/image.jpg'

    # fix url
    if url[:1] == '/':
    	url = urlo.scheme + '://' + urlo.netloc + url

    r = requests.get(url, stream=True, verify=False)
    with open(image_name, 'wb') as f:
        for chunk in r.iter_content():
            f.write(chunk)

if len(sys.argv) != 2:
	print("Usage: ", sys.argv[0], " url")
	#sys.exit(1)


url = sys.argv[1]
r = requests.get(url, verify=False)
page = r.content.decode('utf-8')
soup = BeautifulSoup(page, 'lxml')
prs = Presentation("braindo-tmpl.pptx")
from pptx.util import Inches, Pt
urlo = urlparse(url)


if urlo.netloc == "kand.info":
	# print "kand.info"

	# pack title
	pack_title = soup.find('h2', "with-tabs").string

	# regexp 
	# TODO: <div class='razdatka_header'>Раздаточный материал</div> 
	question = 'Вопрос '
	answer = 'Ответ:'
	comment = 'Комментарий:'
	alt_answer = 'Зачёт:'
	questionimg = re.compile(r'/sites/default/files/.+')

	qsplit = '<br/><hr/><br/>'
	psplit = 'p'

elif urlo.netloc == "db.chgk.info":
	# print "db.chgk.info"

	# pack title
	pack_title = soup.find('h1', "title").string 

	# regexp 
	question = 'Вопрос '
	answer = 'Ответ:'
	comment = 'Комментарий:'
	alt_answer = 'Зачёт:'
	questionimg = re.compile(r'http://db.chgk.info/images/db/\d+.jpg')

	qsplit = '<div class="question" id=".+">'
	psplit = 'p'
else:
	print ('site is not supported')
	exit(0)


# Title Slide
title_slide_layout = prs.slide_layouts[0]
slide = prs.slides.add_slide(title_slide_layout)
title = slide.shapes.title
subtitle = slide.placeholders[1]
title.text = pack_title
subtitle.text = url  # "Generated by genquestpack"


print(pack_title)


text_slide_layout = prs.slide_layouts[1]
qs = re.split(qsplit, page) #TODO: SoupStrainer


for q in qs:
	#print '--------------------------------------------------------'
	#print q

	soup = BeautifulSoup(q, 'lxml') 

	for qp in soup(psplit): 
		txt = qp.get_text(strip=True)
		#print('\n--------\n', txt, '\n--------')
		# Вопрос 1:
		#m = question.match(qp.text)
		m = txt.startswith(question)
		if m:
			#print(txt, '\n--------\n')
			slide = prs.slides.add_slide(text_slide_layout)
			title = slide.shapes.title
			text = slide.placeholders[1]

			title.text = 'Вопрос'
			text.text = txt[m + len(question) + 1:]
			if text.text == ' ':
				text.text = 'q is not found'

			# Вопросы - картинки
			#imgs = BeautifulSoup(str(qp), 'lxml')
			for img in soup.findAll('img', src = questionimg):
				downloadImage(img['src'])				

				pic = slide.shapes.add_picture('qimg.jpg', text.left, text.top)

				text.top += pic.top

				os.remove('qimg.jpg')
			    #print img['src']

			#print m.group()
			#print qp.text[m.end():]

		# Ответ:
		#m = answer.match(qp.text)
		m = txt.startswith(answer)
		if m:
			slide = prs.slides.add_slide(text_slide_layout)
			title = slide.shapes.title
			text = slide.placeholders[1]

			title.text = 'Ответ'
			text.text = txt[m + len(answer) - 1:]

			#print m.group()
			#print qp.text[m.end():]
			#print qp.text	

		# Зачёт: 
		#m = alt_answer.match(qp.text)
		m = txt.startswith(alt_answer)
		if m:
			# обычно идет после ответа поэтому отдельного слайда не создается
			text.text += '\n\n'
			text.text += txt

			#print m.group()
			#print qp.text[m.end():]
			#print qp.text	


		# Комментарий:
		#m = comment.match(qp.text)
		m = txt.startswith(comment)
		if m:
			slide = prs.slides.add_slide(text_slide_layout)
			title = slide.shapes.title
			text = slide.placeholders[1]

			title.text = 'Комментарий'
			text.text = txt[m + len(comment) - 1:]

			#print m.group()
			#print qp.text[m.end():]
			#print qp.text	

# save pptx
file_name = unidecode(pack_title)
file_name = re.sub('[^\w\-_\. ]', '_', file_name)
file_name += '.pptx'

prs.save(file_name)
print ('-> ', file_name)
